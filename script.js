function cleanObjectKeys(obj) {
  const cleaned = {};
  for (let key in obj) {
    cleaned[key.trim()] = obj[key];
  }
  return cleaned;
}

const container = document.getElementById("container");
const formContainer = document.getElementById("formContainer");
const startFormBtn = document.getElementById("startFormBtn");

startFormBtn.addEventListener("click", () => {
  formContainer.innerHTML = "";
  generateForm();
  formContainer.classList.add("show");
});

function createCard(
  item,
  showDecision = false,
  decisionIndex = null,
  onDecision = null
) {
  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `
    <h3>Szitu√°ci√≥ #${item["Szitu√°ci√≥"]}</h3>
    <section>
      <strong>üö∂‚Äç‚ôÇÔ∏è Gyalogosok</strong>
      <ul>
        <li><strong>Sz√°m:</strong> ${item["Gyalogosok sz√°ma"]}</li>
        <li><strong>Gyerek:</strong> ${item["Gyal. Gyerek"]}</li>
        <li><strong>N≈ë:</strong> ${item["Gyal. n≈ë"]}</li>
        <li><strong>F√©rfi:</strong> ${item["Gyal. F√©rfi"]}</li>
        <li><strong>Szab√°lyos:</strong> ${
          item["Gyal. szab√°lyos"] ? "‚úÖ" : "‚ùå"
        }</li>
        <li><strong>L√°mpa z√∂ld:</strong> ${
          item["Gyal. L√°mpa"] ? "‚úÖ" : "‚ùå"
        }</li>
        <li><strong>T√∫l√©lte:</strong> ${
          item["Gyalogos t√∫l√©lte"] ? "‚úÖ" : "‚ùå"
        }</li>
      </ul>
    </section>
    <section>
      <strong>üöó Utasok</strong>
      <ul>
        <li><strong>Sz√°m:</strong> ${item["Utasok sz√°ma"]}</li>
        <li><strong>Gyerek:</strong> ${item["Utas gyerek"]}</li>
        <li><strong>N≈ë:</strong> ${item["Utas n≈ë"]}</li>
        <li><strong>F√©rfi:</strong> ${item["Utas f√©rfi"]}</li>
        <li><strong>Szab√°lyos:</strong> ${
          item["Utas szab√°lyos"] ? "‚úÖ" : "‚ùå"
        }</li>
        <li><strong>T√∫l√©lte:</strong> ${item["Utas t√∫l√©lte"] ? "‚úÖ" : "‚ùå"}</li>
      </ul>
    </section>
    <p><strong>‚ö†Ô∏è Man≈ëver t√∂rt√©nt:</strong> ${
      item["Man≈ëver t√∂rt√©nt"] ? "‚úÖ Igen" : "‚ùå Nem"
    }</p>
  `;

  if (showDecision) {
    const decisionDiv = document.createElement("div");
    decisionDiv.className = "decision";
    const gyalogosBtn = document.createElement("button");
    const utasBtn = document.createElement("button");
    gyalogosBtn.textContent = "Gyalogosok t√∫l√©lnek";
    utasBtn.textContent = "Utasok t√∫l√©lnek";

    [gyalogosBtn, utasBtn].forEach((btn) => {
      btn.addEventListener("click", () => {
        onDecision(decisionIndex, btn.textContent.includes("Gyalogos"));
        gyalogosBtn.disabled = true;
        utasBtn.disabled = true;
      });
    });

    decisionDiv.appendChild(gyalogosBtn);
    decisionDiv.appendChild(utasBtn);
    card.appendChild(decisionDiv);
  }

  return card;
}

function generateForm() {
  fetch("data.json")
    .then((res) => res.json())
    .then((data) => {
      const cleaned = data.map(cleanObjectKeys);
      const groupBySzitu = cleaned.reduce((acc, item) => {
        if (item["Szitu√°ci√≥"] && item["Kit√∂lt≈ë"] === 1) {
          acc.push(item);
        }
        return acc;
      }, []);

      const answers = new Array(groupBySzitu.length).fill(null);
      const grid = document.createElement("div");
      grid.className = "card-grid";

      groupBySzitu.forEach((item, index) => {
        grid.appendChild(
          createCard(item, true, index, (i, isGyalogos) => {
            answers[i] = isGyalogos;
            checkIfComplete();
          })
        );
      });

      const saveBtn = document.createElement("button");
      saveBtn.textContent = "Ment√©s";
      saveBtn.disabled = true;

      function checkIfComplete() {
        saveBtn.disabled = answers.includes(null);
      }

      saveBtn.addEventListener("click", () => {
        const stored = JSON.parse(localStorage.getItem("kitoltesek") || "[]");
        const kitoltoSzam =
          (Math.max(0, ...stored.map((s) => s[0]?.Kit√∂lt≈ë || 0)) || 0) + 1;

        const result = groupBySzitu.map((item, index) => {
          const gyalogosTulelt = answers[index];
          const utasTulelt = !gyalogosTulelt;

          return {
            ...item,
            Kit√∂lt≈ë: kitoltoSzam,
            "Gyalogos t√∫l√©lte": gyalogosTulelt,
            "Utas t√∫l√©lte": utasTulelt,
          };
        });

        stored.push(result);
        localStorage.setItem("kitoltesek", JSON.stringify(stored));
        location.reload();
      });

      formContainer.appendChild(grid);
      formContainer.appendChild(saveBtn);
    });
}

function renderKitoltesek(data, local = false) {
  const validData = data
    .map(cleanObjectKeys)
    .filter(
      (item) =>
        typeof item["Kit√∂lt≈ë"] === "number" &&
        typeof item["Szitu√°ci√≥"] === "number"
    );

  const kitoltoMap = new Map();
  validData.forEach((item) => {
    const id = item["Kit√∂lt≈ë"];
    if (!kitoltoMap.has(id)) {
      kitoltoMap.set(id, []);
    }
    kitoltoMap.get(id).push(item);
  });

  kitoltoMap.forEach((szituaciok, kitoltoSzam) => {
    const accordion = document.createElement("button");
    accordion.className = "accordion";
    accordion.textContent = `${
      local ? "üìù √öj Kit√∂lt≈ë" : "Kit√∂lt≈ë"
    } #${kitoltoSzam}`;

    const panel = document.createElement("div");
    panel.className = "panel";

    const grid = document.createElement("div");
    grid.className = "card-grid";

    szituaciok.forEach((item) => {
      grid.appendChild(createCard(item));
    });

    panel.appendChild(grid);
    container.appendChild(accordion);
    container.appendChild(panel);

    accordion.addEventListener("click", () => {
      panel.classList.toggle("show");
    });
  });
}

// Adatok bet√∂lt√©se JSON-b√≥l
fetch("data.json")
  .then((res) => res.json())
  .then((data) => {
    renderKitoltesek(data);
    const local = JSON.parse(localStorage.getItem("kitoltesek") || "[]");
    local.forEach((kitoltes) => renderKitoltesek(kitoltes, true));
  })
  .catch((err) => console.error("Hiba t√∂rt√©nt:", err));
